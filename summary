[다운 후 에러나면 아래 내용 확인]
1. Servers > context.xml에 컨넥션풀 생성
2. src/main/resources 에 mappers 패키지 있는지 확인
3. 프로젝트 우클릭 > 프로퍼티스 > java build path > 라이브러리탭 > jar라이브러리 삭제 후 다시 추가

-----------------------------------------------------------------------------------------------
@ 컨넥션풀 추가 
-----------------------------------------------------------------------------------------------
1. Servers > context.xml

 <Resource auth="Container" 
	name="jdbc/Oracle11g_smart" 
	driverClassName="oracle.jdbc.driver.OracleDriver" 
	type="javax.sql.DataSource"
	url="jdbc:oracle:thin:@localhost:1521:xe"
	maxActive="1"
	maxWait="1000"
	username="smart"
	password="smart"
 /> 
-----------------------------------------------------------------------------------------------
2. 회원 정보 테이블 생성
	[1] DB계정생성
	--Oracle System 계정에서 계정생성 
	--encrypt 계정생성
	CREATE USER smart IDENTIFIED BY smart DEFAULT TABLESPACE USERS;
	--권한 주기
	GRANT CONNECT, RESOURCE TO smart;
	--락 해제
	ALTER USER smart ACCOUNT UNLOCK;

	[2].회원테이블 생성
	CREATE TABLE users(
	    userid      VARCHAR2(255) NOT NULL, -- 아이디
	    passwd      VARCHAR2(255) NOT NULL, -- 비밀번호
	    name        VARCHAR2(255) NOT NULL, -- 이름
	    enabled     NUMBER(1) DEFAULT 1,    -- 활성화 여부(0:비활성(휴면), 1:활성)
	    authority   VARCHAR2(20) DEFAULT 'ROLE_USER', -- 일반사용자 / 관리자 등
	    primary key(userid)
	);
-----------------------------------------------------------------------------------------------
3. 프로젝트 설정
   project 우클릭 > properties > Java Build Path탭 > Edit 버튼 > 
     세번째 Workspace default JRE(jre1.8.0_201) 선택

   project 우클릭 > properties > Project Facets > Java를 1.8로 변경
                 Runtimes탭에서 Apache Tomcat v8.5선택     
                 
   Java Compiler - 1.8선택 되었는지 확인.
   Web Project Settings가 설정한 패키지 3번째명과 일치하는지 확인
-----------------------------------------------------------------------------------------------
4. web.xml
	========================================================
	-[1] 설정 작업
	========================================================
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml   <!-- 이건 원래 있었음.      -->
					 classpath:/security-context.xml    <!-- 시큐리티 설정 파일 추가1 -->
					 classpath:/security-datasource.xml <!-- 시큐리티 설정 파일 추가2-->
		</param-value>
	</context-param>
	
	========================================================
	-[2] 시큐리티 세션이벤트처리 리스너
	========================================================
	<!-- 스프링 시큐리티에서 사용하는 세션 이벤트 처리 관련 리스너로서, 세션 만료 체크 & 동시 로그인 제한 등의 기능 제공 -->
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>
	
	=========================================================
	-[3] 한글 안깨지게 처리 (아래의 시큐리티 추가설정보다 위치가 위에 오도록 설정하세요.)
	=========================================================
	<!-- 한글 안깨지게 처리 시작 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 한글 안깨지게 처리 종료 -->

	=========================================================
	-[4] 시큐리티 설정 작업
	=========================================================
	<!-- 시큐리티 추가 시작 -->
	<!-- springSecurityFilterChain : 보안 필터 체인 : 보안과 관련된 작업을 처리한다.
		 - 로그인 폼을 보여주거나, 접근 권한이 없는 경우 403 Forbidden(권한 없음) 에러 코드를 내보낸다.
		 - DelegatingFilterProxy -> FilterChainProxy 호출 -> SecurityFilterChain 호출 -> 실제 자원 접근(호출)
	 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 시큐리티 추가 종료 -->
	=========================================================
	-[5] 에러처리 페이지 설정
	=========================================================
	<!-- 에러처리 페이지 -->
	<error-page>
		<error-code>500</error-code>
		<location>/user/login</location>
	</error-page>
	=========================================================
	-[6] 세션 타임 아웃 설정 (시간은 주기 나름)
	=========================================================	
	<!-- 세션 타임아웃 설정(20분) -->
	<session-config>
		<session-timeout>20</session-timeout>
	</session-config>
-----------------------------------------------------------------------------------------------
5. pom.xml
	=========================================================
	-[0] 버전 설정
	=========================================================
  	   - https://spring.io/projects/spring-framework 에서 스프링 버전 확인
       - 현재 5.1.8
	   
	   <properties>
			<java-version>1.8</java-version>
			<org.springframework-version>5.1.8.RELEASE</org.springframework-version> 

	       ※주의사항 : 스프링 3버전은 스프링 시큐리티가 작동되지 않음.
	         최소한 4.1.6이상 으로 권장
	     (원래 시큐리티 버전 3.2.5.RELEASE으로 테스트했는데 이번프로젝트는 5.1.3.RELEASE로 작업할 것임.)
	=========================================================
	-[1] 시큐리티 추가
	=========================================================
	<!-- 스프링 security 설정 시작 -->
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-config</artifactId>
		<version>5.1.3.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-core</artifactId>
		<version>5.1.3.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-taglibs</artifactId>
		<version>5.1.3.RELEASE</version>
	</dependency>
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-web</artifactId>
		<version>5.1.3.RELEASE</version>
	</dependency>
	<!-- 스프링 security 설정 종료 -->
	=========================================================
	-[2] 마이바티스 추가
	=========================================================
	<!-- Mybatis 설정 시작(총4개) : https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.2</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.1.8.RELEASE</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.4.6</version>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>5.1.8.RELEASE</version>
	</dependency>
	<!-- Mybatis 설정 종료 -->
	
	=========================================================
	-[3] json 추가
	=========================================================
	<!-- json converter 시작-->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.9.8</version>
	</dependency>
	<!-- json converter 종료-->
	=========================================================
	-[4] mail API 추가
	=========================================================
	<!-- Java Mail API 설정 시작-->
    <dependency>
        <groupId>javax.mail</groupId>
        <artifactId>mail</artifactId>
        <version>1.4.7</version>
    </dependency>
    
    <dependency>
        <groupId>com.sun.mail</groupId>
        <artifactId>javax.mail</artifactId>
        <version>1.5.6</version>
    </dependency>
    
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>4.1.6.RELEASE</version>
    </dependency>
    <!-- Java Mail API 설정 종료-->
	=========================================================
	-[5] fileUpload 추가
	=========================================================
    <!-- fileUpload -->
    <dependency>
     <groupId>commons-fileupload</groupId>
     <artifactId>commons-fileupload</artifactId>
     <version>1.3.2</version>
    </dependency>
    <!-- fileUpload -->
	=========================================================
	-[6] JSON 
	=========================================================
    <!-- JSON -->
	<dependency>
		<groupId>org.codehaus.jackson</groupId>
		<artifactId>jackson-mapper-asl</artifactId>
		<version>1.9.13</version>
	</dependency>
	=========================================================
	-[7] JSONArray 
	=========================================================
	<!-- JSONArray JSONObject  -->
	  <dependency>
		<groupId>com.googlecode.json-simple</groupId>
		<artifactId>json-simple</artifactId>
		<version>1.1</version>
	  </dependency>     
                
     <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.9.8</version>
     </dependency>
	<!-- JSONArray JSONObject -->
	=========================================================
	-[8] lombok --> vo getter & setter & build 자동
	- 사용 법
		@Data
		public UserVO {
			private userid
		}
	- (승훈이 칭찬해~)
	=========================================================
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	    <version>1.16.20</version>
	</dependency>
-----------------------------------------------------------------------------------------------
6. sevlet-context.xml 설정 -------------********보류
	[1] 시큐리티
	<!-- 시큐리티 적용하지 않도록 include 하위 등록 -->
	<resources mapping="/include/**"   location="/WEB-INF/views/include" />

	[2] 시큐리티
	<!-- 시큐리티 -->
	<!-- @Secured 어노테이션 활성화, 사용권한 제한 -->
	<!-- Namespaces 탭에서 먼저 security 체크 후 오른쪾에 http://www.springframework.org/schema/security/spring-security.xsd로 체크  -->
	<!-- 메소드 별로 실행 권한을 주곘다는 의미..? -->
	<security:global-method-security secured-annotations="enabled" />

-----------------------------------------------------------------------------------------------
7. security-context.xml 설정
   - src/main/resources/security-context.xml 
   - [new > Spring Bean Configuration File]
   - [namespage - security 체크 후 오른쪽에 맨 위 xsd버전으로 gogo]
	===================================================
	-[1] security-context.xml 설정
	===================================================
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:sec="http://www.springframework.org/schema/security"
		xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	
		<!-- [정적 리소스 파일]들에는 보안 설정을 하지 않음. -->
		<sec:http pattern="/include/**" security="none" />
		
		<sec:http auto-config="true" use-expressions="true" create-session="never" >
			<!-- 관리자 영역 설정 -->
			<sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
			
			<!-- 권한에 관계없이 접속 가능한 영역 (guest도 접속 가능)-->
			<sec:intercept-url pattern="/user/**"  access="permitAll" />
			
			<!-- 로그인한 사용자 영역 -->
			<sec:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_GUEST','ROLE_MANAGER')" />
	
			<!-- 로그인 폼 -->
			<sec:form-login login-page="/user/login.do"
				login-processing-url="/user/login_check.do"
				authentication-success-handler-ref="userLoginSuccessHandler"
				authentication-failure-handler-ref="userLoginFailureHandler"
				username-parameter="userid" 
				password-parameter="passwd"
			/>
			
			<sec:session-management>
				<!-- 
					max-sessions="1" : 같은 브라우저 여러창에서 동시접속 막기
					expired-url="/user/login.do" : 세션만료시 이동할 주소
					error-if-maximum-exceeded="true" : 최대 세션 초과시 에러 옵션
				 -->
				<sec:concurrency-control max-sessions="1"
					expired-url="/user/login.do"
					error-if-maximum-exceeded="true"
				/>
			</sec:session-management>
			
			<!-- 접근권한이 없는 경우의 코드 -->
			<sec:access-denied-handler ref="userDeniedHandler" />
		</sec:http>
		
		<bean id="userLoginSuccessHandler" class="com.security.encrypt.service.UserLoginSuccessHandler"/>
		<bean id="userLoginFailureHandler" class="com.security.encrypt.service.UserLoginFailureHandler"/>
		<bean id="userDeniedHandler"	   class="com.security.encrypt.service.UserDeniedHandler"/>
		
		<!-- 로그인 인증을 처리하는 빈 -->
		<!-- 만일, 오류가 난다면 UserAuthenticationService에서 추가작업을 해줘야하는데 안해줘서 그럼. -->
		<bean id="userService" class="com.security.encrypt.service.UserAuthenticationService" >
			<bean:constructor-arg name="sqlSession" ref="sqlSession" />
		</bean>
		
		<!-- 비밀번호 암호화를 위한 빈 -->
		<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	</beans>

-----------------------------------------------------------------------------------------------
8. 맵퍼 xml파일
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper
	    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
-----------------------------------------------------------------------------------------------
9. security-datasource.xml 설정
	- /src/main/resource/security-datasource.xml
	- [new > Spring Bean Configuration File]
	- servlet-context.xml에서 빈등록하던것을 이곳에서 진행.
	=========================================================
	-[1] 마이바티스 설정 추가
	=========================================================
	<!-- Mybatis 설정 시작 -->
	<beans:bean name="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/Oracle11g_encrypt" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>
	
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	</beans:bean>

	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>	
	<!-- Mybatis 설정 종료 -->

	==========================================================
	-[2] 트랜잭션 관리자 추가 
	==========================================================
	<!-- 트랜잭션 관리자 : @Transactional 어노테이션 처리 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<bean id= "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>






